The best solution is to split into cases and solve individually, but a much better solution would be using a recursive function to solve it. We will use the same idea as the one we have used in the [previous problem](../6-stacks-and-queues/5) with the difference that we won't need a stack for storing items because all we are going to do is removing items from an array, so let's start by defining the function and then define the cases individually.

```cpp
void printQueue(vector<int> &vec){
    while(!vec.empty()){
        cout << vec[0] << " ";
        vec.erase(vec.begin());
    }
}
```
This is what we're going to do for each case, we will remove the element from the array and print it out. For example let's solve the first case:
```cpp
void printQueue(vector<int> &vec){
    while(!vec.empty()){
        cout << vec[0] << " ";
        vec.erase(vec.begin());
    }
}
int main(){
    vector<int> v;
    v = {1, 2, 3};
    printQueue(v); // 1 2 3
}
```
This is what we will do for every element of the array, if you look at the original question there are more cases so let's solve them using recursive functions.

```cpp
void printQueueRecursive(vector<int> &vec){
    if(!vec.empty()) {
        int x = *(vec.begin());
        printQueueRecursive(vec);
    }
}
```
This is how we will solve the first case, for every other cases you can use exactly this code with an empty vector as input so that means that all we have to do is call our function like this: `printQueueRecursive({})` which will be undefined because no element will be in the array and thus print nothing.

```cpp
void printQueue(vector<int> &vec){
    if(!vec.empty()) {
        int x = *(vec.begin());
        printQueueRecursive(vec);
    }
}
int main(){
    vector<int> v;
    v = {1, 2, 3};
    printQueue(v); // 1 2 3
}
```