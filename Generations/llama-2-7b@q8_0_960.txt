```python
import random

def solution():
    def rand_range(a, b):  # (a,b)  -> (random number in [a,b])
        return random.randint(a, b)
    
    def is_palindrome(num): 
        left = int(num[:-1])
        right = num[-1]
        if not abs(left - right) == 1:
            return False
        
        elif left > right:
            left, right = right, left
        
        if left != right:
            return False
            
        return True
    
    def is_prime(n):
        # https://codegolf.stackexchange.com/questions/182465/check-if-a-number-is-prime-using-recursion?r=SearchResults
        if n < 2: return False
        
        if n == 2: return True
            
        elif n % 2 != 0 or (n <= 3 and n in [5,7]): # is even
            for i in range(3, int(math.sqrt(n)) + 1, 2):
                if n % i == 0: return False
            
        elif not is_palindrome(n) or (n <= 9 and (n % 4 != 0 or (n % 5) % 2)): # not a palindrome, odd number, not divisible by 4 or 5
            for i in range((int(math.sqrt(n)) + 1)/2, int(math.ceil(math.sqrt(n))), 2):
                if n % (i**2) == 0: return False
            
        else: # not a palindrome odd number divisible by 4 or 5
            for i in range((int(math.sqrt(n)) + 1)/2, int(math.ceil(math.sqrt(n))), 2):
                if n % (i**2) != 0: continue # not a factor of any odd power of that number
                for j in range(1, i//2+1):
                    if is_prime(j*i): return False
            
        return True
```