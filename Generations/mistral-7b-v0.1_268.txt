```python
import requests
import json
from bs4 import BeautifulSoup
import re
from datetime import datetime,timedelta

def get_html(url):
    response = requests.get(url)
    return response.text

def get_json(url):
    response = requests.get(url)
    return json.loads(response.text)

def extract_title(soup):
    title = soup.find('h1', {"class": "page-heading"}).text
    return title

def extract_links(soup):
    links = []
    for link in soup.findAll("a"):
        if (link.has_attr('href')):
            url = link['href']
            links.append(url)
    return links

def extract_news(html):
    soup = BeautifulSoup(html, "lxml")
    title = extract_title(soup)
    news = extract_links(soup)
    return [title,news]

def get_all_news(url):
    news_list=[]
    html = get_html(url)
    while url != None:
        try:
            news = extract_news(html)
            news_list.append(news[1])
            print('Current URL:', url)
            if 'next' in news[0]:
                next_page = news[0]['next']
                html = get_html(next_page)
            else:
                break
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_all_news_from_api(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_all_news_from_api2(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_all_news_from_api3(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api4(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api5(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api6(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api7(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api8(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list

def get_news_from_api9(url):
    news_list=[]
    news = get_json(url)['articles']
    for item in news:
        try:
            if 'publishedAt' not in item:
                raise Exception("Missing 'publishedAt' field")
            published_date = datetime.strptime(item["publishedAt"], "%Y-%m-%dT%H:%M:%SZ")
            title = item['title']
            description= item['description']
            link = item['url']
            news_list.append([title, link])
        except Exception as e:
            print("Error:", str(e))
    return news_list
```