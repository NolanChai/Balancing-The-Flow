
```java
class Solution {
    public boolean canYouShootYourself(int[][] rooms) {
        if (rooms == null || rooms.length <= 1 || rooms[0].length <= 1) return true;
        
        Map<String, List<Integer>> map = new HashMap<>();
        for (int i=0; i<rooms.length-1; i++) {
            if (!map.containsKey(rooms[i][0])) map.put(rooms[i][0], new ArrayList<>());
            if (!map.get(rooms[i][0]).contains(i)) map.get(rooms[i][0]).add(i);
        }
        
        // 每个房间的相邻房间
        Set<String> nextSet = new HashSet<>();
        for (int i=1; i<rooms.length; i++) {
            if (!nextSet.contains(rooms[i-1][0])) nextSet.add(rooms[i-1][0]);
            
            map.get(rooms[i-1][0]).remove(i-1);
        }
        
        int[] x = rooms[0][0];
        int[] y = new int[]{x, 0};
        for (int i=0; i<map.size(); i++) {
            if (y[0] >= map.get(rooms[i][0]).size()) y[0]=0;
            // 每次比较是否可以抵达当前位置
            for (int j=y[1]; j<=y[1]+2 && !nextSet.contains(rooms[j-1][0]); j++) {
                if (!map.get(rooms[j-1][0]).isEmpty()) map.get(rooms[j-1][0]).remove(j);
                
                if (x != rooms[j-1][0]) {
                    x = rooms[j-1][0];
                    y=new int[]{x, j-y[1]};
                } else {
                    if (x==rooms[j-1][0] && map.get(rooms[j-1][0]).contains(j)) return false;
                }
            }
        }
        
        // 判断能否见到自己
        Set<String> selfSet = new HashSet<>();
        for (int i=y[1]; i<=y[1]+2 && !nextSet.contains(rooms[i-1][0]); i++) {
            if (x == rooms[i-1][0]) return false;
            
            Map<String, List<Integer>> subMap = map.getOrDefault(rooms[i-1][0], new HashMap<>());
            for (int j=y[1]; j<=y[1]+2 && !subMap.containsKey(rooms[j-1][0]) && !nextSet.contains(rooms[j-1][0]); j++) {
                if (!selfSet.contains(rooms[j-1][0])) selfSet.add(rooms[j-1][0]);
            }
        }
        
        return selfSet.size() <= 1;
    }
}
```