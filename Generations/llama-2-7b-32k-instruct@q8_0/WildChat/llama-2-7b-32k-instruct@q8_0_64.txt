1. hcyl() - This function is used to create a cylinder-shaped object in the world. It takes four arguments: bottom (the starting point for the cylinder), height (the height of the cylinder), radius (the radius of the cylinder), and id (the block ID of the cylinder). The function creates a cube with a radius that starts at the given coordinates, and then copies it along the X and Z axes to create a mirror image.
2. cyl() - This function is similar to hcyl(), but it creates a cylinder instead of a cube. It takes three arguments: bottom (the starting point for the cylinder), height (the height of the cylinder), and radius (the radius of the cylinder). The function creates a cylinder with a radius that starts at the given coordinates, and then copies it along the X axis to create a mirror image.
3. cube() - This function is used to create a cuboid-shaped object in the world. It takes four arguments: bottom (the starting point for the cuboid), height (the height of the cuboid), radius (the radius of the cuboid), and id (the block ID of the cuboid). The function creates a cuboid with a width, height, and length that start at the given coordinates, and then copies it along all three axes to create a mirror image.
4. sphereoid() - This function is used to create a spherical object in the world. It takes four arguments: w (the radius of the sphere), h (the height of the sphere), d (the diameter of the sphere), and id (the block ID of the sphere). The function creates a sphere with a radius that starts at the given coordinates, and then copies it along all three axes to create a mirror image.
5. asphereoid() - This function is similar to sphereoid(), but it uses the async/await syntax to create a spherical object in the world. It takes four arguments: w (the radius of the sphere), h (the height of the sphere), d (the diameter of the sphere), and id (the block ID of the sphere). The function creates a sphere with a radius that starts at the given coordinates, and then copies it along all three axes to create a mirror image.
6. line() - This function is used to create a linear path in the world. It takes six arguments: x1 (the starting point for the path), y1 (the starting point for the path), z1 (the starting point for the path), x2 (the ending point for the path), y2 (the ending point for the path), z2 (the ending point for the path), and id (the block ID of the path). The function creates a line with a starting point at (x1, y1, z1) and an ending point at (x2, y2, z2), and then sets the blocks along that path to have the given ID.
7. cloneBlock() - This function is used to create a copy of a block in the world. It takes six arguments: sx (the starting x coordinate for the copy), sy (the starting y coordinate for the copy), sz (the starting z coordinate for the copy), dx (the ending x coordinate for the copy), dy (the ending y coordinate for the copy), dz (the ending z coordinate for the copy), w (the width of the block to copy), h (the height of the block to copy), and l (the length of the block to copy). The function creates a copy of the block that starts at (sx, sy, sz) and ends at (dx, dy, dz), with a width, height, and length of w, h, and l.
8. duplicateBlock() - This function is used to create multiple copies of a block in the world. It takes nine arguments: sx (the starting x coordinate for the first copy), sy (the starting y coordinate for the first copy), sz (the starting z coordinate for the first copy), dx (the ending x coordinate for the last copy), dy (the ending y coordinate for the last copy), dz (the ending z coordinate for the last copy), w (the width of the block to copy), h (the height of the block to copy), l (the length of the block to copy), offsetX (the amount to offset the x coordinates of each copy), offsetY (the amount to offset the y coordinates of each copy), and offsetZ (the amount to offset the z coordinates of each copy). The function creates multiple copies of the block that start at (sx, sy, sz) and end at (dx, dy, dz), with a width, height, and length of w, h, and l. Each copy is shifted by the given amounts along the X, Y, and Z axes before being created
9. rotateBlock() - This function is used to rotate an