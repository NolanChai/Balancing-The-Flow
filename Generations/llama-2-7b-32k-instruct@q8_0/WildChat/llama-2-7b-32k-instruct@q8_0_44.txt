To remove a host from the `known hosts` file on an SSH client, you can use the `--remove-key` option. Here's an example command that removes the host `example.com` from the known hosts file on the local machine:
```
ssh -o "KnownHostsFile /dev/null" root@example.com
```
This command tells SSH to disable the `KnownHostsFile` option, which means it won't write the host information to the `known_hosts` file. It also uses the `--remove-key` option to remove the host key for `example.com`. The `@root` syntax is used to specify that we want to log in as the root user.

Alternatively, you can use the `ssh-keyscan` command to remove a host from the known hosts file. Here's an example command that removes the host `example.com` from the known hosts file:
```
ssh-keyscan -H example.com | ssh -o "KnownHostsFile /dev/null" root@example.com
```
This command uses the `ssh-keyscan` command to retrieve the host key for `example.com`, and then pipes it to the `ssh` command with the `--known-hosts` option disabled, which means that the host information will be removed from the known hosts file. The `@root` syntax is used to specify that we want to log in as the root user.

It's important to note that removing a host from the known hosts file on an SSH client may not always work if the remote server has a policy to only accept hosts that are explicitly listed in the known hosts file. In such cases, you may need to use alternative methods to secure your network connections.

使用`ssh-keyscan`命令来查看所有已知的服务器 hostname。这个命令会返回一个列表，其中包含了每个服务器的主机名和 IP 地址。你可以在终端上使用这个命令来查看所有已知的服务器。
```
$ ssh-keyscan
   hostname        ip-addr     username
   server1.example.com   192.168.100.5  user1
   server2.example.com   192.168.100.6  user2
```
你可以使用`-H`选项来指定服务器的 hostname，例如：
```
$ ssh-keyscan -H server1.example.com
```
这将返回一个列表，其中包含了服务器的主机名和 IP 地址。你可以使用`awk`或`cut`命令来过滤结果，以便获得所需的信息。例如：
```
$ awk '/server1.example\.com/ {print $2}' ssh-keyscan -H server1.example.com
   hostname        ip-addr     username
   server1.example.com   192.168.100.5  user1
```
这将返回服务器的 IP 地址和用户名，可以使用其中的 IP 地址来连接到服务器。

你还可以使用`ssh-keyscan`命令来查看所有已知的服务器 hostname，并将其排序成字母顺序。例如：
```
$ ssh-keyscan -o sort | awk '{print $2}'
   hostname        ip-addr     username
   server1.example.com   192.168.100.5  user1
   server2.example.com   192.168.100.6  user2
```
这将返回服务器的 IP 地址和用户名，且已经排序成字母顺序。你可以使用`awk`命令来过滤结果，以便获得所需的信息。例如：
```
$ awk '/server1\.example\.com/ {print $2}' ssh-keyscan -o sort | awk '{print $2}'
   hostname        ip-addr     username
   server1.example.com   192.168.100.5  user1
   server2.example.com   192.168.100.6  user2
```
这将返回服务器的 IP 地址和用户名，且已经排序成字母顺序。你可以使用其中的 IP 地址来连接到服务器。

可能因为不存在的路径问题。考虑检查下以确保该文件/目录的存在性。

如果是一个代理服务器，可能需要使用 -R 参数来指定 SSH 公钥文件所在的目录。例如，如果 SSH 公钥文件在 /home/user/sshkeys/id_rsa，那么可以使用以下命令：
```
ssh-keygen -R /home/user/sshkeys
```
如果是一个私有服务器，可能需要根据实际情况修改该命令。例如，如果 SSH 公钥文件在 /etc/ssh/ssh_host_rsa_key.pub，那么可以使用以下命令：
```
ssh-keygen -R /etc/ssh/ssh_host_rsa_key.pub
```
如果上述两种情况都不适用，则可能需要检查 SSH 公钥文件所在的路径或文件名是否正确。例如，可以使用命令 ls -la 来列出目录中的文件和目录，以确保 SSH 公钥文件存在并拥有预期的名称。
```
ls -la /etc/ssh/ssh_host_rsa_key.pub
```
另外，也可能需要使用 ssh-keyscan 命令来搜索 SSH 公钥文件。例如，如果 SSH 公钥文件在 /etc/ssh/ssh_host_rsa_key.pub，那么可以使用以下命令来搜索它：
```
ssh-keyscan -f /etc/ssh/ssh_host_rsa_key.pub
```
这将返回 SSH 公钥文件的主机名和IP地址。然后，可以使用 ssh-keygen 命令来生成新的 SSH 公钥文件。例如，如果 SSH 公钥文件在 /home/user/sshkeys/id_rsa，那么可以使用以下命令来生成新的 SSH 公钥文件：
```
ssh-keygen -b 4096 -f /home/user/sshkeys/id_rsa -N "New SSH key"
```
在上面的命令中，我们使用了 -b 参数来指定生成的 SSH 公钥文件的大小（这里是 4096）。我们也使用了 -f 参数来指定生成的 SSH 公钥文件所在的目录（这里是 /home/user/sshkeys），并且设置了一个名称“New SSH key”。

需要注意的是，如果你使用的是一个代理服务器，则可能需要根据实际情况修改上面的命令。例如，如果 SSH 公钥文件在 /home/user/sshkeys/id_rsa，那么可以使用以下命令来生成新的 SSH 公钥文件：
```
ssh-keygen -b 4096 -f /etc/ssh/ssh_host_dsa_key.pub -N "New SSH key"
```
在上面的命令中，我们使用了 -b 参数来指定生成的 SSH 公钥文件的大小（这里是 4096）。我们也使用了 -f 参数来指定生成的 SSH 公钥文件所在的目录（这里是 /etc/ssh/ssh_host_dsa_key.pub），并且设置了一个名称“New SSH key”。

另外，还需要注意的是，如果你使用的是一个私有服务器，那么可能需要根据实际情况修改上面的命令。例如，如果 SSH 公钥文件在 /etc/ssh/ssh_host_dsa_key.pub，那么可以使用以下命令来生成新的 SSH 公钥