their long awaited fight of their time, but now we have found out who was really responsible for getting this fight together. It turns out it wasn't Bob Arum or Al Haymon, instead, it is the woman who was standing behind Floyd Mayweather and Pacquiao at the press conference yesterday in Grand Central Station; Jennifer Delgado, Floyd Mayweather's manager.

Delgado told TMZ Sports she did all of the work to make this fight happen, but Arum and Haymon will get their share of the pie when the payday comes around. When asked about the rumors that Pacquiao was actually scared of fighting Mayweather because of his size, Delgado said there is no truth to that at all. She also revealed that Pacquiao has been working out with Freddie Roach and they are in talks for a fight between the two boxers as well.

There you have it, this should be an interesting fight when Mayweather takes on Pacquiao on May 2nd!

Follow me on twitter @ZTGaming101 to keep up with all the news!<s> <|endoftext|>
Lately I've been getting a lot of requests for help from people who have hit a brick wall while trying to install or configure MySQL on their machine. As you might guess, it is often the case that these questions are related to problems which could easily be solved by following a few simple steps in the documentation and tutorials available at mysql.com and other places.

This has prompted me to create this page where I collect some of the most common MySQL installation issues (and their solutions) along with relevant links to the official documentation. This is not intended to replace or supersede the information provided by MySQL, but it might be useful for people who get stuck in similar situations and feel that they are alone.

If you're reading this, then you've probably already tried searching for your problem on Google (or at least I hope so!). So please check if any of these issues are relevant to your situation before asking me questions about MySQL installation. If it turns out that the problem is covered here or in another place, then try to find a solution yourself.

If you've read this page and still have problems with your MySQL installation, I hope you will come back when you have actually tried some of the suggested solutions before asking for help. And finally, please be sure to include as much information as possible about the exact problem you are experiencing - more details is better than less!

Now, onwards to the issues:

I can't get MySQL installed on my machine even though it seems to work for others who use Linux or other OSes. What's going on?
-----------------------------
This happens most frequently when you are trying to install MySQL in an environment with a restricted user account, i.e., an account that does not have read permissions on the directory where MySQL is installed. In this case, it is necessary to give the installation process enough privileges to create files and directories for itself.

The best solution here is to use the --user option when running mysql_install_db in order to specify a user with full permissions. For example:
```
sudo mysql_install_db --user myuser
```
This will install MySQL as the user `myuser`, which should have read/write access on the installation directory, and can create files there. (Note that if your system's account name differs from `root`, then you need to use the `--user` option with `username` instead of `root`.)

If this doesn't solve the problem, it might be related to a bug in the installer or to a corrupt MySQL installation. In any case, please provide as much information as possible about the error message(s) you are seeing so that I can have a better chance at helping you!

I am trying to install MySQL Community Server (the free version), and it says the server part is not compatible with my version of Linux. What should I do?
-----------------------------
This problem has happened many times, especially in older versions of Ubuntu and similar distributions, where the package manager installed a 64-bit version of MySQL Server, but also included a 32-bit version that was called "MySQL Community Server". These packages were not compatible with each other.

The solution to this problem is very simple: do not install the separate MySQL Community Server package. Instead, use the official MySQL packages from your distribution's software repository (yum/apt-get). They are usually named something like `mysql-server`, and will automatically provide you with all versions of MySQL that you need without conflicts.

If you have tried to do this but are still getting errors about incompatible packages, please include the exact error messages you see when attempting to install MySQL. (You can do this by running "sudo mysql_install_db" as root, and then checking the output from the terminal.)

I want to use SSL for my MySQL connection. Where do I find out how?
-----------------------------
In order to enable SSL support for your MySQL database, you need to follow these steps:

1. First of all, you have to make sure that OpenSSL is installed on your system (as well as the necessary development files). You can check this by running "openssl version" in a terminal window. If it reports that OpenSSL is not available, then you should install it first before trying to enable SSL support for MySQL.
2. Once you have verified that OpenSSL is installed and available on your system, you need to update the MySQL server configuration file with the necessary options for SSL. You can do this by using the --skip-networking option when running mysql_install_db:
```
sudo mysql_install_db --user myuser --skip-networking --ssl
```
This will install MySQL with SSL support, which should enable you to connect securely to your database using SSL. (Note that the above command assumes that you are installing MySQL as the user `myuser`. If this is not the case, then change the username accordingly.)
3. Once MySQL has been installed, it will have a new section in its configuration files called "ssl" with options such as "key_file", "cert_file", and others. You can modify these options to suit your needs by creating a new file called `my.cnf` in the directory where you installed MySQL (usually /usr/local/lib/mysql or /etc/mysql), and then adding the appropriate settings there:
```
[mysqld]
...
ssl-ca=/path/to/certificates/rootCA.pem
ssl-cert=/path/to/certificate/youruser.crt
ssl-key=/path/to/private/youruser.key
...
```
This is the general configuration for SSL support, but you may need to modify it further depending on your specific needs and the details of your certificate files. For example, if you have a root certificate file that includes several subordinate certificates, then you should put them in separate files in the same directory (e.g., "ca1.pem", "ca2.pem", etc.).
4. After modifying the configuration file, you need to restart MySQL by running "sudo service mysql stop" and then "sudo service mysql start". This will reload the new SSL settings for your MySQL instance.
5. Finally, you can test that everything is working properly by trying to connect to your MySQL database using SSL:
```
mysql -h localhost -u user -p --ssl
```
This should connect to your database securely using SSL and display a successful message when the connection has been established. If it does not work for some reason, then you may need to check that the OpenSSL installation is correct, or perhaps adjust the configuration file settings as appropriate.

That's all there is to enabling SSL support for your MySQL database! (Note: if you are using a version of Ubuntu with Unity desktop environment, then you can use the GUI tool "MySQL Config Editor" instead of editing files directly.)

I am trying to set up a replication cluster, but I get errors when I try to start the slave. What's going on?
-----------------------------
When setting up a MySQL replication cluster, you need to make sure that both servers in the cluster have a consistent view of your database schema and data. This is achieved by copying the master server's binary logs over to the slave using rsync and starting the slave with --replicate-ignore-dbms-group set to 0 (which means "do not ignore dbms groups when replicating").

However, it seems that sometimes these steps are not sufficient to achieve a consistent view of your database schema, especially for certain types of databases. If you find yourself encountering errors such as "ERROR 18038 (HY000) at line 560: No binary log present" when starting the slave server, then this can be an indication that there is a problem with your replication setup.

There are several potential causes of this error, but here are some common ones:
1. The master and slave servers have different database schemas. In this case, you should use the --replicate-ignore-dbms-group option to tell the slave server not to ignore dbms groups when replicating. For example:
```
sudo mysql_install_db --user myuser --skip-networking --ssl --replicate-ignore-