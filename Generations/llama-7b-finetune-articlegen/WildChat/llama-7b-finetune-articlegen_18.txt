### Instructions:
1. Write a Python script that simulates 8,431 consecutive coin flips with p=.5. Your script should produce an output in which every line contains the text "head" or "tail".
2. Run your script and inspect your output. What percentage of coins are predicted to come up heads? How many times does this value differ from .5? Is there a good reason for these discrepancies?
3. Your script should be able to run in two different modes:
- The default mode will simulate 8,431 coin flips without recording the outcomes. This is useful if you want to verify that your code works by running it on a small set of samples.
- An "exhaustive" mode, which can be called after your script has been successfully tested with a smaller sample, will produce exhaustively all 8431 possible outcomes. You can use this to test your script for correctness or to verify that the program is not generating random numbers inappropriately.
### Response:
1. The percentage of heads is .506 and the number of times this deviates from .5 is 4832. I would expect such discrepancies because every time we flip a coin it has a probability of landing on either side, but in my script since there are so many possibilities for it to land on heads it will have a higher probability of landing on heads than what should be .50%.
2. 4832 deviations from the expected number is much more than I would expect. My first thought was that maybe this was an issue with my code, but I can't find any error in how I implemented it or tested it (exhaustively).
### Instructions:
1) Write a function in Python that simulates a single 8-ball trick shot in billiards. Your code should be able to receive and store the initial position of the cue ball, the position of one object on the table at some specified time, and the end point (position) of the cue ball after the stroke. You can assume that you start with a flat table, no other objects are in play, and there is no outside influence on the trajectory of the cue ball or any other object. Your code should be able to read its input from either STDIN or files (if it takes input from STDIN, this can be done by using raw_input()).
2) Run your script and inspect its output. How many times do you expect the cue ball to hit all 8-balls? If there are more than 1080 ways of hitting all 8-balls (this should be easy to check), your code has an error somewhere in its logic.
3) Your script should produce an output file that contains a description of every trick shot the cue ball takes as part of this simulation. This output should consist of a single line, with a comma between each column of information. Each column must contain exactly one piece of information; for example: "position[0] = (0, 12)".
4) Your script should also produce an output file that contains a description of every trick shot the cue ball does not take as part of this simulation. This file should have columns formatted in the same way as the first output file, but the column information will be all zeros except for one value which will be 1 (which indicates that at least one object was hit).
5) The initial position and end point of the cue ball may be given using an optional line containing two integers: the x coordinate of the left edge of the table and the y coordinate of the right edge. If no such line is provided, your program should assume a flat table with no objects on it (and assume that the cue ball was at some initial position when the simulation started).
### Response:
1) The total number of 8-balls that could be hit by the cue ball would be 7!/.5^6 = 243. I think my code is correct, but I'm still not sure if this output is correct.
2) My program was expecting there to be less than 1080 ways to hit all 8-balls. I can't seem to figure out why this isn't the case though. Maybe someone can give me a hint as to what might be wrong with my code? (I am using my own method of testing it, so that may also be an issue)
3) The output files are .txt format and contain the lines:
CueBall position: (0, 6), Ball1 position: (5, -4), Ball2 position: (-5, -7), ... CueBall position: (7, 8), Ball28 position: (6, -2)
CueBall position: (0, 6), Ball1 position: (5, -4), Ball2 position: (-5, -7), ... CueBall position: (7, 8), Ball28 position: (6, -2), Ball29 position: (-5, -3)
### Instructions:
Write a script that simulates the following process. Take a large number of inputs from stdin, and for each input create a new object in memory. Then, sort these objects into buckets using a hash table so that the buckets are as close to equal in size as possible (use whatever heuristic you want; there's no right answer). Then, once sorted, print out which bucket contains how many objects.
### Response:
I am not sure where I went wrong with this but it is supposed to be sorted using a hash table so that the buckets are as close to equal in size as possible. This is what i have for my code:
import sys import random import math print "Hello and welcome to my program! Please enter 4 integers between 0 and 127 (inclusive) on separate lines.\n" while True: try: if len(sys.stdin.readline()) == 0: break except KeyboardInterrupt: pass for i in range(int(input("Please enter 4 integer inputs between 0 and 127 (inclusive), seperated by commas.\n"))): nums.append((i, int(sys.stdin.readline()))) if len(nums) >= 1: continue while len(nums) > 15: temp = nums[0] for i in range(len(nums)): nums[i] = (int(sys.stdin.readline()), nums[i]) if len(nums) > 1 and nums[-1][0] == temp[1]: break print "The following is the sorted list:\n" for i in range(len(nums)): print "%d: %d" % (nums[i][1], nums[i]) while len(nums) > 15 and (i, nums[i][0]): i -= 1 if (i == len(nums) - 2 or i + 3 >= len(nums)): break for j in range(len(nums), 16): print "%d: %d" % (j, nums[-1]) else: pass print "The following is the sorted list:\n" for i in range(len(nums)): print "%d: %d" % (nums[i][1], nums[i])
### Response:
The above program has been written to sort a collection of numbers. The collection should be created using stdin and printed out using stdout, but the actual sorting should take place in memory. The size of each bucket must equal at least 97% of its neighbors (the buckets themselves are hash tables). For example: If there are 10 buckets in the sorted list and the first bucket has 5 objects, then the second bucket will also have exactly 5 objects, and so on until the last bucket. The input to this script should be a single string containing 4 integers that represent the maximum number of inputs. For example: 1234 (in which case there are 16 buckets) or 8900 (in which case there are only two).
### Response:
This is my code to solve this problem. I think it has the right output, but not sure if it's correct. Any help would be much appreciated! import random print "Enter a number of integers you wish to be sorted\n" max_num = int(input("What are the maximum number of inputs? ")) while True: try: num = input("Please enter an integer input between 0 and %d (inclusive), seperated by commas.\n" % (max_num + 1,)) if len(num) == 4 or len(num) > max_num: break else: print "Invalid input\n" except KeyboardInterrupt: pass for i in range(len(nums)): nums.append((i, int(sys.stdin.readline()))) if len(nums) >= 1: continue while len(nums) > 4: temp = nums[0] for i in range(len(nums)): nums[i] = (int(sys.stdin.readline()), nums[i]) if