```python
import sys, os
sys.stdout = os.fdopen(sys.stdout.fileno(), 'w', 4) # set encoding to utf-8 for python27 and above
sys.stderr = os.fdopen(sys.stderr.fileno(), 'w', 4) # set encoding to utf-8 for python27 and above

import traceback, time
from random import choice as randchoice
from collections import Counter

#
# A class containing some basic statistics about a player's performance in a match.
class PlayerStat:
	def __init__(self):
		#
		# Some attributes to describe the player.
		#
		self._id = 0 # int : unique id for this player instance
		self._name = "" # string: player's name
		self._country = "World" # string: country of player
		self._team = "Chelsea FC" # string: team of the player
		self._score = 0 # int: number of goals scored by this player in a match (only used if the result is a draw)
		self._minutes_played = 0 # int : minutes played by this player in a match (only used if the result is not a draw and only in one-on-one situations)
		self._assists = [] # list of Assist objects
		
	def __str__(self):
		return "%s [%s, %d]" % ("Assists:", ", ".join(map(lambda x: "%d - %s" % (x.minutes_played, x._player), self._assists)), len(self._assists))
	
class Assist:
	def __init__(self):
		#
		# Some attributes to describe the player that assisted this goal.
		#
		self._minutes_played = 0 # int : number of minutes played by this player in the match (only used if the result is a draw)
		self._player = "" # string: name of the player that assisted this goal
		self.match_id = randchoice(range(1,5))
		self.__class__ = "Assist" # type: Assist - for use in Counter object
	def __repr__(self): return self._player + " [" + str(self.match_id) + "]"
	
class Match:
	def __init__(self):
		#
		# Some attributes to describe the match, i.e. the teams and their scores.
		#
		self._result = 0 # int : result of this match (either win, draw or loss)
		self._players = [] # list of PlayerStat instances: each player's performance in a match (only used if the result is not a draw and only in one-on-one situations)
		self.match_id = randchoice(range(1,5))
		self.__class__ = "Match" # type: Match - for use in Counter object
	def __repr__(self): return "%d (%s %d)" % (self._result, self._players[0]._country, len(self._players))
	
#
# A class representing the counter of some event. This is mainly used to count the number of draw matches and the number of goals scored by each player in a match.
class Counter:
	def __init__(self):
		#
		# Some attributes that describe this counter, i.e. its name, and the events it counts (in this case either match or player).
		#
		self._name = "Matches" # string : name of this counter
		self._events_counted = 0 # int: number of times this counter has been counted
		self.player_counts = {} # dict from PlayerStat -> Assist count
		self.__class__ = "Counter" # type: Counter - for use in Counter object
	def __repr__(self): return self._name
	
#
# This is a global variable to keep track of the current counter.
counter_type = "Matches"
count = 0
global_counters = [Counter()]

#
# This function initializes this class with a dictionary containing some information about matches and players for use in other classes (e.g. Counter).
# It is important to note that these variables are not static, but actually objects created within the functions of this module!
def get_match(name, team1, country1, name2, country2, draw=False):
	#
	# Initializes a match instance and returns it. The only parameters that matter for creating the match object are those specified in the first two arguments (the rest is just for future reference).
	#
	match = Match()
	if not draw: # if this is not a draw
		player1_name = country1 + "-" + name1
		player2_name = country2 + "-" + name2
		player1_team = team1
		player2_team = team2
	else: # if this is a draw, the players are simply returned as two separate players. The only thing to note here is that the player object must be instantiated first in order for it to be assigned any attributes!
		return [PlayerStat(name=player1_name, country=country1, team=player1_team), PlayerStat(name=player2_name, country=country2, team=player2_team)]
	match._result = 0 # set the result to zero
	#
	# For each player, we try to find a name that is unique among all players. We use the following algorithm:
	# - generate a list of random names based on a dictionary from country code -> name;
	# - loop through the names and try to find one that has not yet been assigned to any other player in this match. If we don't succeed, then the last player is simply returned as is.
	# For example: if the country codes are 'GB', 'US', 'RU', 'FR' and 'DE' respectively with corresponding names 'Johnson', 'Smith', 'Russian', 'Frenchman' and 'German' (their order does not matter), then the following will be returned in random order: Johnson, German, Frenchman, Smith, Russian
	#
	global_counters[0].player_counts[country1] = global_counters[0].player_counts.get(country1, 0) + 1 # increment the number of players from this country
	match._players = [] # empty list that will be filled with player instances later on
	while len(match._players) < 4: # as long as we still have fewer than 4 players in our match, try to find a name for another one...
		player_name1 = randchoice([country1 + "-" + name1]) # select a random player from the first country
		player_name2 = randchoice([country2 + "-" + name2]) # select a random player from the second country
		match._players.append(PlayerStat(name=player_name1, country=country1, team=team1)) # append a new player to our list
		if match._players[-1].score > 0: # if this is not a draw, then we only need the score for one of the players
			match.players[match.players.index(PlayerStat(name=player_name2))] = PlayerStat(name=player_name2, country=country2, team=team1)
	return match # return our finished match object
def get_assist(minutes_played, name): # helper function to create a new assist
	#
	# Given minutes played and player name, return an Assist instance.
	#
	global_counters[0].player_counts[name] = global_counters[0].player_counts.get(name, 0) + 1 # increment the number of players from this country
	return Assist(minutes_played=minutes_played, player=name)
#
### End: Instruction ###
```