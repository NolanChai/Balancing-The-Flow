
If the above sentence is modified to say 'It is too unbearable to hope that her mother is not alive and is suffering.' , would your answer change?

### Original solution by [Jeffrey Dai](https://leetcode.com/contest/weekly-contests/325/problems/find-the-duplicate-character-in-a-string/discuss/1682789/)

The way to think about this problem is that we have a list of strings `S`, which all differ in exactly one character. We want the index of that character. If there were no characters, this would just be finding the first element that's not present.

This can be done using an integer array `dp` with the same size as `S`. Initially, we set it to `-1`, which means that all elements are valid and we don't know if they match. After that, for every i in the range of 0 to length(S), let a[i] be the index of the last character in S where `i` is a valid candidate (ie not in the first element).

Then dp[i] can be thought of as "the distance from i to the last character that's an exact match for i". For each character, we want the closest distance. We set it to -1 if there are no matches and iterate through them like this:

\begin{code}
if dp[i] >= 0 then
    for j = 0 ..< length(S) do
        if S[j] == i then
            if j > i then
                dp[j] = min(dp[j], dp[i])
            end else
                dp[j] = dp[i]
\end{code}

There are a few problems with this algorithm though.
\begin{itemize}
\item It will run in quadratic time, because we need to iterate through the whole list every single time. This can be reduced to O(n) by caching the results of each iteration (like so: https://github.com/JeffDai/leetcode-java-masters/blob/master/src/main/java/com/leetcode/problems/FindTheDuplicateCharacterInARegularString/FindTheDuplicateCharacterInARegularString.java)
\item It will run in O(n log n) time, but the problem is that it will run in quadratic time on \begin{code}
S.length <= 10^4
\end{code}. So if we don't have a big enough constant, it won't be able to handle inputs of this size without exceeding our maximum execution time limit. (ie with the constant `2`, there would have been an input where the algorithm took 5 minutes to finish and failed)
\item It will fail when there are multiple characters in S that match each other. This can be resolved by adding a check for equality after the two if statements.
\end{itemize}