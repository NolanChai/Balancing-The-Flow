Here's the Python equivalent code for the given C program:
```python
def calculate_result(white_balls, power_ball):
    return 0

if __name__ == '__main__':
    import sys
    
    if len(sys.argv) != 7:
        print("Usage: python scriptname power_ball (5 white balls)")
        sys.exit(1)
    
    power_ball = int(sys.argv[1])
    
    white_balls = []
    for i in range(5):
        white_balls.append(int(sys.argv[2+i]))
        
    result = calculate_result(white_balls, power_ball)
    
    print("{:.2f} percent chance of winning".format(result))
```

#!/usr/bin/env python
# This shebang line tells the operating system that this file is a Python script and should use the interpreter located at /usr/bin/env python.

Assuming your Python code is stored in a file called "lottery.py" and it has functions to calculate the powerball, you can compile it using the following command:
```css
python -m py\_compile lottery.py
```
This will generate an executable file called `a.out`. Then, you can run your program by typing:
```bash
./a.out 42 1 2 3 4 5
```
If your Python code requires additional libraries or dependencies to be installed, you may need to install them first using pip or another package manager. For example, if you are using numpy for a specific function, you can install it with:
```bash
pip install numpy
```

The output `0` in your code is because you haven't defined a valid implementation for the `calculate_result` function. You need to define how the function should calculate the result based on the input parameters.

In your example, it seems that the power ball should be 42 and the white balls should be chosen randomly from the set {1, 2, 3, 4, 5}. Assuming this, you can modify the `calculate_result` function to generate a random set of 5 white balls and calculate the probability of winning based on that. Here's an updated implementation:
```python
import random

def calculate_result(power_ball, white_balls):
    # Generate a random set of 5 white balls
    random_white_balls = [random.randint(1, 5) for _ in range(5)]
    
    # Calculate the probability of winning based on the power ball and white balls
    winning_count = sum([power_ball == ball for ball in random_white_balls])
    total_count = len(random_white_balls)
    result = round(100.0 * (winning_count / total_count), 2)
    
    return result
```
With this implementation, you can call the function from your main program like this:
```python
if __name__ == "main":
    if len(sys.argv) != 7:
        print("Usage: {} power_ball (5 white balls)".format(sys.argv[0]), file=sys.stderr)
        sys.exit(-1)

    power_ball = int(sys.argv[1])

    white_balls = [int(sys.argv[i]) for i in range(2, 7)]

    result = calculate_result(power_ball, white_balls)

    print("{:.2f} percent chance of winning".format(result))
```
This should output the expected probability of winning based on the given power ball and white balls.

It's possible that the file names or permissions may be different in your environment. The command "ls -l" displays a detailed list of files and directories, including their permissions (file type, ownership, group ownership, read, write, execute permissions).

In this output, the first column shows the file type. "-rwxr-xr-x" indicates that it's a regular file (-) owned by the user harry (rwx), and the staff user (r-x). This means that harry has read, write, and execute permissions on the file, while the staff user can only read and execute the file.

The second column shows the file name "a.out", which likely indicates an executable file for the lottery program. The third column shows the size of the file in bytes ("8904"). The fourth column is empty because the file does not have any special attributes or device files associated with it.

The last two columns are empty as well, so there are no additional information about the file's group ownership or any other attributes.

You can verify this by running the "ls -l" command again to see if it matches what I've described above. If not, please provide more details about your environment and the output you are getting.