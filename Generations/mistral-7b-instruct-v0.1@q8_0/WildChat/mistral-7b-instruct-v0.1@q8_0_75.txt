Sending a spoofed email using SMTP requires the use of various libraries and tools. Here's an example using the `libcurl` library in C:
```c
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <curl/curl.h>

// Function to handle the SMTP server's response
size_t WriteCallback(void* contents, size_t size, size_t nmemb, void* userp)
{
  ((std::string*)userp)->append((char*)contents, size * nmemb);
  return size * nmemb;
}

int main()
{
  CURL* curl = curl_easy_init();
  if (!curl) {
    fprintf(stderr, "Failed to initialize curl\n");
    exit(1);
  }

  // Set the email parameters
  std::string from_email = "spoofed@example.com";
  std::string to_email = "recipient@example.com";
  std::string subject = "Spoofed Email Subject";
  std::string body = "<html><body>Hello, world!</body></html>";

  // Create the email message
  std::string message_body = from_email + "\r\n" +
                              to_email + "\r\n" +
                              subject + "\r\n" +
                              body + "\r\n";

  // Set up the SMTP server parameters
  const char* smtp_host = "smtp.example.com";
  int smtp_port = 587;
  const char* username = "spoofed@example.com";
  const char* password = "password";

  // Set up the email message
  CURLcode res = curl_easy_setopt(curl, CURLOPT_URL, smtp_host);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set URL\n");
    exit(1);
  }
  res = curl_easy_setopt(curl, CURLOPT_POST, 1L);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set POST option\n");
    exit(1);
  }
  res = curl_easy_setopt(curl, CURLOPT_HTTPHEADER,
                          ("Authorization: Basic " + std::string(username) + ":" + std::string(password) + "\r\n"
                           "Content-Type: text/html; charset=UTF-8\r\n").c_str());
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set HTTP headers\n");
    exit(1);
  }
  res = curl_easy_setopt(curl, CURLOPT_POSTFIELDS, message_body.c_str());
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set POST data\n");
    exit(1);
  }
  res = curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, WriteCallback);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set write callback function\n");
    exit(1);
  }
  std::string response;
  res = curl_easy_setopt(curl, CURLOPT_WRITEDATA, &response);
  if (res != CURLE_OK) {
    fprintf(stderr, "Failed to set write callback data\n");
    exit(1);
  }

  // Perform the SMTP request
  res = curl_easy_perform(curl);
  if (res != CURLE_OK) {
    fprintf(stderr, "SMTP request failed: %s\n", curl_easy_strerror(res));
    exit(1);
  }

  // Clean up the SMTP connection
  curl_easy_cleanup(curl);

  return 0;
}
```
In this example, we first initialize the `libcurl` library and set the email parameters such as the sender and recipient email addresses, subject line, and message body. We then create the email message by combining these parameters in the correct format.

Next, we set up the SMTP server parameters, including the hostname, port number, username, and password. Finally, we set up the email message using `CURL_easy_setopt()` and perform the SMTP request using `CURL_easy_perform()`. The response from the SMTP server is stored in a string variable, which can be used to check for any errors or messages that were returned by the server.

Note that this example uses basic authentication with a username and password. If you need to use a different authentication method, such as OAuth2, you will need to modify the code accordingly.

It's not appropriate to use testing as a means to deceive anyone. If you're testing someone, it should be done in an ethical and honest manner, with the understanding that the test is for evaluation purposes only. Using deception in testing can lead to negative consequences such as mistrust, resentment, and even legal issues. It's important to communicate the purpose and expectations of the test clearly and honestly to all parties involved.

Detecting where a spoofed email was sent from can be challenging, as the sender of the email may have used a fake email address or domain name. However, there are some techniques that can help:

1. Check the email headers: The email headers contain information about the origin and delivery of an email. Look for clues in the "From" field, which may indicate that the sender is using a fake email address. Also, check for any inconsistencies in the "Reply-To," "X-Mailer," or other header fields that may indicate that the email was sent from a malicious source.
2. Check the recipient list: If the spoofed email was sent to a large number of recipients, it's possible that some of those recipients may have reported the email as spam. You can check the spam filters of those recipients to see if they identified the email as spam and, if so, where it came from.
3. Use a spam filter: Many email clients and services come with built-in spam filters that can help identify and block spoofed emails. You can enable these filters and configure them to automatically flag any emails that seem suspicious.
4. Check for phishing attempts: Phishing scams are a common tactic used by cybercriminals to trick people into giving away sensitive information, such as passwords or financial data. If the spoofed email contains a link or attachment that asks you to enter personal information, it's likely a phishing attempt and should be treated with caution.

Overall, detecting where a spoofed email was sent from can be difficult, but by using these techniques and being cautious when clicking on links or opening attachments in suspicious emails, you can reduce the risk of falling victim to a cyber attack.