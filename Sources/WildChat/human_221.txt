User: "i have list of products with each one of them like button to mark is as a favorite product, how make this compontent reusable to like and dislike the product in angular"

Assistant: "1. Create a FavoriteButton component with an @Input() property to get the product data.
2. In the FavoriteButton component, create a @Output() event emitter to emit when the button is clicked with the updated product data.
3. Use ngClass directive to conditionally set a class for the favorite button based on whether or not the product is "liked".
4. In your product list component, use ngFor directive to loop through the products and use the FavoriteButton component for each one.
5. Pass the product data to each instance of FavoriteButton as an @Input().
6. Handle the emitted event in the product list component and update the product data accordingly.

Here is a sample code for the FavoriteButton component:

```
import { Component, Input, Output, EventEmitter } from '@angular/core';

@Component({
  selector: 'app-favorite-button',
  template: `
    <button (click)="onFavoriteClicked()">
      <span class="heart" [ngClass]="{ 'liked': isLiked }"></span>
    </button>
  `,
  styleUrls: ['./favorite-button.component.css']
})
export class FavoriteButtonComponent {
  @Input() product: any;
  @Output() favoriteChanged: EventEmitter<any> = new EventEmitter();

  isLiked: boolean = false;

  onFavoriteClicked() {
    this.isLiked = !this.isLiked;
    this.product.isLiked = this.isLiked;
    this.favoriteChanged.emit(this.product);
  }
}
```

And here is how you can use the FavoriteButton component in your product list component:

```
<app-product *ngFor="let product of products"
  [product]="product"
  (favoriteChanged)="updateProduct($event)">
</app-product>
```

In the above code, updateProduct() function is called whenever an event is emitted from the FavoriteButton component. This function can be used to update the product data accordingly."